import streamlit as st
import pandas as pd
import altair as alt

# Cargar datos
@st.cache_data
def load_data():
    df_pred = pd.read_csv('predicciones_alerta_vih_2025_2030.csv')
    df_hist = pd.read_csv('DATASET_VIH.csv')
    return df_pred, df_hist

df_pred, df_hist = load_data()

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Predicci√≥n y Alerta de VIH en Per√∫",
    layout="wide",
    initial_sidebar_state="expanded"
)

# T√≠tulo principal
st.markdown(
    """
    # ü¶† Predicci√≥n y Alerta de Casos de VIH en Per√∫
    Consulta los **casos estimados y predichos de VIH** por Departamento, Sexo y A√±o.
    Tambi√©n puedes ver si hay una **alerta** respecto al promedio hist√≥rico.
    """,
    unsafe_allow_html=True
)

# --- Barra lateral de filtros ---
st.sidebar.header("Filtros de Consulta")

# Obtener opciones √∫nicas
available_years = sorted(df_pred['Anio'].unique())
available_departments = sorted(df_pred['Departamento'].unique())
available_sex = sorted(df_pred['Sexo'].unique())

# Filtros interactivos
year = st.sidebar.selectbox(
    "A√±o",
    options=available_years,
    index=0,
    key="year_selector"  # Agregar key √∫nico
)

departamento = st.sidebar.selectbox(
    "Departamento",
    options=available_departments,
    index=0,
    key="dept_selector"  # Agregar key √∫nico
)

sexo = st.sidebar.selectbox(
    "Sexo",
    options=available_sex,
    index=0,
    key="sex_selector"  # Agregar key √∫nico
)

tipo_grafico = st.sidebar.radio(
    "Tipo de gr√°fico:",
    options=["Barras", "L√≠neas", "√Årea"],
    index=0,
    key="chart_type_selector"  # Agregar key √∫nico
)

# --- Filtrar datos (CORREGIDO) ---
def get_filtered_data(departamento, sexo):
    """
    Filtra los datos por departamento y sexo.
    No filtra por a√±o aqu√≠ para mantener todos los datos disponibles.
    """
    # Filtrar datos hist√≥ricos
    hist_filtrado = df_hist[
        (df_hist['Departamento'] == departamento) &
        (df_hist['Sexo'] == sexo)
    ].copy()
    
    # Filtrar datos de predicci√≥n
    pred_filtrado = df_pred[
        (df_pred['Departamento'] == departamento) &
        (df_pred['Sexo'] == sexo)
    ].copy()
    
    return hist_filtrado, pred_filtrado

# Obtener datos filtrados
hist_filtrado, pred_filtrado = get_filtered_data(departamento, sexo)

# --- Mostrar resultados ---
if not pred_filtrado.empty:
    # Obtener datos para el a√±o seleccionado (CORREGIDO)
    datos_a√±o = pred_filtrado[pred_filtrado['Anio'] == year]
    
    if not datos_a√±o.empty:
        casos_pred = int(datos_a√±o['CasosEstimados_Predichos'].iloc[0])
        prom_hist = float(datos_a√±o['PromHist'].iloc[0])
        alerta = datos_a√±o['Alerta'].iloc[0]

        st.subheader(f"Resultados para {departamento} - {sexo} - {year}")
        st.markdown(f"**Casos estimados predichos:** `{casos_pred}`  \n**Promedio hist√≥rico:** `{prom_hist:.1f}`")

        # Mostrar alerta
        if alerta:
            st.error("‚ö†Ô∏è ¬°Alerta! El valor predicho est√° fuera del rango hist√≥rico.", icon="üö®")
        else:
            st.success("‚úÖ Sin alerta. El valor predicho est√° dentro del rango hist√≥rico.", icon="‚úÖ")

        # M√©tricas
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Casos predichos", casos_pred)
        with col2:
            st.metric("Promedio hist√≥rico", f"{prom_hist:.1f}")
        with col3:
            diferencia = casos_pred - prom_hist
            st.metric("Diferencia", f"{diferencia:+.1f}", delta=f"{diferencia:+.1f}")

        # --- Gr√°ficos (MEJORADO) ---
        st.markdown("---")
        st.subheader(f"Visualizaci√≥n: {tipo_grafico}")

        # Preparar datos combinados para visualizaci√≥n
        df_hist_viz = hist_filtrado[['Anio', 'CasosEstimados']].rename(columns={'CasosEstimados': 'Casos'})
        df_hist_viz['Tipo'] = 'Hist√≥rico'
        
        df_pred_viz = pred_filtrado[['Anio', 'CasosEstimados_Predichos']].rename(columns={'CasosEstimados_Predichos': 'Casos'})
        df_pred_viz['Tipo'] = 'Predicci√≥n'
        
        df_completo = pd.concat([df_hist_viz, df_pred_viz]).sort_values('Anio').reset_index(drop=True)

        # Gr√°fico de Barras - Solo a√±o seleccionado
        if tipo_grafico == "Barras":
            # Datos para el a√±o seleccionado
            datos_barras = pd.DataFrame({
                'Categor√≠a': ['Promedio hist√≥rico', f'Predicci√≥n {year}'],
                'Casos': [prom_hist, casos_pred],
                'Color': ['Promedio', 'Predicci√≥n']
            })
            
            chart = alt.Chart(datos_barras).mark_bar(size=60).encode(
                x=alt.X('Categor√≠a:N', title='', axis=alt.Axis(labelAngle=0)),
                y=alt.Y('Casos:Q', title='N√∫mero de Casos'),
                color=alt.Color('Color:N', 
                              scale=alt.Scale(domain=['Promedio', 'Predicci√≥n'], 
                                            range=["#1f77b4", "#ff7f0e"]),
                              legend=alt.Legend(title="Tipo")),
                tooltip=['Categor√≠a', 'Casos']
            ).properties(
                title=f"Comparaci√≥n para {departamento} - {sexo} - {year}",
                width=600,
                height=400
            )

        # Gr√°fico de L√≠neas
        elif tipo_grafico == "L√≠neas":
            # Resaltar el a√±o seleccionado
            df_completo['Destacado'] = df_completo['Anio'] == year
            
            # L√≠nea base
            base_chart = alt.Chart(df_completo).mark_line(point=True, strokeWidth=2).encode(
                x=alt.X('Anio:O', title='A√±o'),
                y=alt.Y('Casos:Q', title='N√∫mero de Casos'),
                color=alt.Color('Tipo:N', 
                              scale=alt.Scale(domain=['Hist√≥rico', 'Predicci√≥n'], 
                                            range=['#1f77b4', '#d62728']),
                              legend=alt.Legend(title="Tipo de Dato")),
                tooltip=['Anio:O', 'Casos:Q', 'Tipo:N']
            )
            
            # Punto destacado para el a√±o seleccionado
            highlight_chart = alt.Chart(df_completo[df_completo['Destacado']]).mark_circle(
                size=200, stroke='black', strokeWidth=2
            ).encode(
                x='Anio:O',
                y='Casos:Q',
                color=alt.Color('Tipo:N', 
                              scale=alt.Scale(domain=['Hist√≥rico', 'Predicci√≥n'], 
                                            range=['#1f77b4', '#d62728'])),
                tooltip=['Anio:O', 'Casos:Q', 'Tipo:N']
            )
            
            chart = (base_chart + highlight_chart).properties(
                title=f"Evoluci√≥n de casos - {departamento} - {sexo} (A√±o destacado: {year})",
                width=700,
                height=400
            ).resolve_scale(color='independent')

        # Gr√°fico de √Årea
        else:  # √Årea
            chart = alt.Chart(df_completo).mark_area(opacity=0.7, line=True).encode(
                x=alt.X('Anio:O', title='A√±o'),
                y=alt.Y('Casos:Q', title='N√∫mero de Casos'),
                color=alt.Color('Tipo:N', 
                              scale=alt.Scale(domain=['Hist√≥rico', 'Predicci√≥n'], 
                                            range=['#1f77b4', '#d62728']),
                              legend=alt.Legend(title="Tipo de Dato")),
                tooltip=['Anio:O', 'Casos:Q', 'Tipo:N']
            ).properties(
                title=f"Tendencia de casos - {departamento} - {sexo}",
                width=700,
                height=400
            )

        st.altair_chart(chart, use_container_width=True)

        # --- Tabla de datos filtrada por a√±o ---
        st.markdown("---")
        st.subheader("Datos del a√±o seleccionado")
        
        # Mostrar datos hist√≥ricos y predicciones para el a√±o seleccionado
        datos_tabla = []
        
        # Datos hist√≥ricos para el a√±o
        hist_a√±o = hist_filtrado[hist_filtrado['Anio'] == year]
        if not hist_a√±o.empty:
            datos_tabla.append({
                'A√±o': year,
                'Tipo': 'Hist√≥rico',
                'Casos': int(hist_a√±o['CasosEstimados'].iloc[0])
            })
        
        # Datos de predicci√≥n para el a√±o
        pred_a√±o = pred_filtrado[pred_filtrado['Anio'] == year]
        if not pred_a√±o.empty:
            datos_tabla.append({
                'A√±o': year,
                'Tipo': 'Predicci√≥n',
                'Casos': int(pred_a√±o['CasosEstimados_Predichos'].iloc[0])
            })
        
        if datos_tabla:
            df_tabla = pd.DataFrame(datos_tabla)
            st.dataframe(df_tabla, use_container_width=True)
        else:
            st.warning(f"No hay datos disponibles para el a√±o {year}")

        # Mostrar tabla completa como expandible
        with st.expander("Ver todos los datos disponibles"):
            df_completo_tabla = df_completo.rename(columns={
                'Anio': 'A√±o',
                'Casos': 'Casos reportados/predichos',
                'Tipo': 'Tipo de dato'
            })
            st.dataframe(df_completo_tabla, use_container_width=True)

    else:
        st.warning(f"No hay datos para {departamento} - {sexo} en el a√±o {year}.")
        
        # Mostrar a√±os disponibles para esta combinaci√≥n
        a√±os_disponibles = sorted(pred_filtrado['Anio'].unique())
        st.info(f"A√±os disponibles para {departamento} - {sexo}: {', '.join(map(str, a√±os_disponibles))}")
        
else:
    st.warning("No hay datos para la combinaci√≥n seleccionada.")
    st.info("Verifica que los archivos CSV contengan datos para el departamento y sexo seleccionados.")

# Informaci√≥n adicional
st.markdown("---")
st.subheader("Informaci√≥n del Sistema")

col1, col2 = st.columns(2)

with col1:
    st.markdown("**Datos cargados:**")
    st.write(f"- Datos hist√≥ricos: {len(df_hist)} registros")
    st.write(f"- Datos de predicci√≥n: {len(df_pred)} registros")
    st.write(f"- Departamentos disponibles: {len(available_departments)}")
    st.write(f"- A√±os de predicci√≥n: {min(available_years)} - {max(available_years)}")

with col2:
    st.markdown("**Filtros actuales:**")
    st.write(f"- A√±o seleccionado: {year}")
    st.write(f"- Departamento: {departamento}")
    st.write(f"- Sexo: {sexo}")
    st.write(f"- Tipo de gr√°fico: {tipo_grafico}")

# Pie de p√°gina
st.markdown("---")
st.markdown(
    """
    <small>
    Desarrollado con Streamlit para el Proyecto de Aprendizaje Estad√≠stico sobre VIH.<br>
    Inspirado en la Sala Situacional VIH del MINSA Per√∫.
    </small>
    """,
    unsafe_allow_html=True
)
